from "  <div class="col-10 p-0" id="main">
               <section class="main-content ms-auto pb-5">
                   <div class="row align-items-center">
                       <div class="col-12">
                           <div class="in-new-prod-cont p-3">
                               <h4 class="p-0 m-0">Course Registration</h4>
                           </div>
                       </div>
                       <div class="col-6 my-3 ms-auto">
                         <div class="card profile p-3">
                              <div class="profile-text">
                                   <p><span class="fw-bold">NAME: </span><span id="fullName">FARINDE IFEOLUWA REUBEN</span></p>
                                   <p><span class="fw-bold">MATRIC NUMBER: </span><span id="matricNo">2024IJ0K</span></p>
                                   <p><span class="fw-bold">LEVEL: </span><span id="level">100</span><span> lvl</span></p>
                              </div>
                              <div class="profile-img">
                                   <img src="../images/img12.png" alt="..." class="img-fluid w-75">
                              </div>
                         </div>
                       </div>
                       <div class="col-12 my-3">
                           <form class="row" id="courseRegistrationForm">
                              <!-- Your existing form elements -->
                              <div class="inputs d-flex justify-content-around my-4 decide">
                                  <!-- This will be dynamically filled by JavaScript -->
                              </div>                              
                              <div class="col-12 forms row">
                                  <!-- Courses will be displayed dynamically here -->
                              </div>
                              <div class="col-12 text-center mt-3">
                                  <button class="btn herobtn mx-auto" type="submit">Register Courses</button>
                              </div>
                          </form>
                       </div>
                   </div>
               </section>
     </main>
    
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
     <script>
          document.addEventListener("DOMContentLoaded", async function () {
               let studyType = '';
       
               try {
                   // Get userId from local storage and save to variable
                   const userId = localStorage.getItem('userId');
                   const apiUrl = /api/v1/auth/users/${userId};
       
                   const token = localStorage.getItem("token"); // Retrieve token from localStorage
       
                   if (!token || token.split('.').length !== 3) {
                       console.error("Invalid Token Format");
                       // Handle invalid token (e.g., redirect to login page)
                   } else {
                       const response = await fetch(apiUrl, {
                           method: 'GET',
                           headers: {
                               'Authorization': Bearer ${token},
                               'Content-Type': 'application/json'
                           }
                       });
       
                       if (!response.ok) {
                           throw new Error('Network response was not ok');
                       }
       
                       const data = await response.json();
                       console.log(data.user);
                       studyType = data.user.studyType;
                       console.log(studyType);
       
                       // Fetch faculties and their courses
                       const facultiesResponse = await axios.get("/api/v1/faculty/allfaculty");
                       console.log(facultiesResponse.data.data);
       
                       const faculties = facultiesResponse.data.data;
                       const studentFaculty = faculties.find(faculty => faculty.name === studyType);
       
                       if (studentFaculty) {
                           console.log('Student Faculty:', studentFaculty);
                           displayRadioButtons(studentFaculty); // Display radio buttons based on student faculty
                       } else {
                           console.error("No matching faculty found for the student.");
                       }
                   }
               } catch (error) {
                   console.error('Fetch error:', error);
               }
           });
       
           // Define getUserId function to retrieve user ID
           function getUserId() {
               // Example: retrieve user ID from localStorage
               return localStorage.getItem('userId');
           }
       
           function displayRadioButtons(studentFaculty) {
               const years = Object.keys(studentFaculty.courses); // Get all years available in the student's faculty
       
               const inputsContainer = document.querySelector('.inputs');
               years.forEach(year => {
                   const yearHtml = 
                       <div class="d-flex align-items-center gap-3">
                           <input type="radio" name="payment" id="${year}" value="${year}">
                           <label for="${year}">${year}</label>
                       </div>
                   ;
                   inputsContainer.insertAdjacentHTML('beforeend', yearHtml);
               });
       
               // Initialize the form with courses of the first year as an example
               if (years.length > 0) {
                   displayCourses(studentFaculty.courses[years[0]]);
               }
       
               // Add event listener to radio buttons to display courses on change
               inputsContainer.addEventListener('change', function (event) {
                   const selectedYear = event.target.value;
                   displayCourses(studentFaculty.courses[selectedYear]);
               });
           }
       
           function displayCourses(courses) {
               const coursesContainer = document.querySelector('.forms.row');
               coursesContainer.innerHTML = ''; // Clear previous courses
       
               courses.forEach(course => {
                   const courseHtml = 
                       <div class="col-lg-6 my-3">
                           <div class="d-flex gap-3 courses justify-content-between w-100 align-items-center">
                               <label for="productName">${course}</label>
                               <input type="checkbox" class="pick" name="course" value="${course}">
                           </div>
                       </div>
                   ;
                   coursesContainer.insertAdjacentHTML('beforeend', courseHtml);
               });
           }
       
           // Assuming this is inside a <script> tag in courseregistration.html
               document.getElementById('courseRegistrationForm').addEventListener('submit', async function (event) {
                    event.preventDefault();
                
                    const userId = localStorage.getItem('userId');
                    const selectedYearRadio = document.querySelector('input[name="payment"]:checked');
                    const selectedYear = selectedYearRadio ? selectedYearRadio.value : null;
                    const selectedCourses = Array.from(document.querySelectorAll('input[name="course"]:checked')).map(el => el.value);
                
                    const payload = {
                        userId: userId,
                        year: selectedYear,
                        courses: selectedCourses
                    };
                
                    try {
                        const response = await fetch('/api/v1/courseRegistration/save', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(payload)
                        });
                
                        if (!response.ok) {
                            throw new Error('Failed to register courses');
                        }
                
                        console.log('Courses registered successfully');
                    } catch (error) {
                        console.error('Error registering courses:', error.message);
                    }
                });
                
    </script>
 </body>
 </html>" and "Faculty of Computing and Informatics
courseregistration:189 
Array(3)
0
: 
courses
: 
{firstYear: Array(8), secondYear: Array(8), thirdYear: Array(8), fourthYear: Array(8), fifthYear: Array(8)}
name
: 
"Science Faculty"
__v
: 
0
_id
: 
"6694778e06c6b3b04aa9805a"
[[Prototype]]
: 
Object
1
: 
courses
: 
{firstYear: Array(8), secondYear: Array(8), thirdYear: Array(8), fourthYear: Array(8), fifthYear: Array(8)}
name
: 
"Science Faculty"
__v
: 
0
_id
: 
"669477fe06c6b3b04aa9805c"
[[Prototype]]
: 
Object
2
: 
courses
: 
{firstYear: Array(8), secondYear: Array(8), thirdYear: Array(8), fourthYear: Array(8), fifthYear: Array(0)}
name
: 
"Faculty of Computing and Informatics"
__v
: 
0
_id
: 
"66947a9406c6b3b04aa98074"
[[Prototype]]
: 
Object
length
: 
3
[[Prototype]]
: 
Array(0)
courseregistration:195 Student Faculty: 
Object
courses
: 
fifthYear
: 
[]
firstYear
: 
(8) ['Biology 101', 'Chemistry 101', 'Physics 101', 'Mathematics 101', 'English 101', 'Computer Science 101', 'Environmental Science 101', 'Geology 101']
fourthYear
: 
(8) ['Biology 401', 'Chemistry 401', 'Physics 401', 'Mathematics 401', 'English 401', 'Computer Science 401', 'Environmental Science 401', 'Geology 401']
secondYear
: 
(8) ['Biology 201', 'Chemistry 201', 'Physics 201', 'Mathematics 201', 'English 201', 'Computer Science 201', 'Environmental Science 201', 'Geology 201']
thirdYear
: 
(8) ['Biology 301', 'Chemistry 301', 'Physics 301', 'Mathematics 301', 'English 301', 'Computer Science 301', 'Environmental Science 301', 'Geology 301']
[[Prototype]]
: 
Object
name
: 
"Faculty of Computing and Informatics"
__v
: 
0
_id
: 
"66947a9406c6b3b04aa98074" from my web console" just like that of transaction i want to disable years the havent bee"
     <script>
          document.addEventListener("DOMContentLoaded", async function () {
               const studyType = localStorage.getItem('studyType');
               let userId = localStorage.getItem('userId');
               const inputsContainer = document.querySelector('.decidess');
               document.getElementById('full').disabled = true;
               document.getElementById('part').disabled = true;
           
               // Fetch faculties and their courses
               const facultiesResponse = await axios.get("/api/v1/faculty/allfaculty");
               const faculties = facultiesResponse.data.data;
               const studentFaculty = faculties.find(faculty => faculty.name === studyType);
           
               if (studentFaculty) {
                   displayRadioButtons(studentFaculty); // Display radio buttons based on student faculty
                   await checkTransactionStatus(userId, studentFaculty.courses);
               } else {
                   console.error("No matching faculty found for the student.");
               }
           
               function displayRadioButtons(studentFaculty) {
                   const years = Object.keys(studentFaculty.courses); // Get all years available in the student's faculty
           
                   years.forEach(year => {
                       const yearHtml = 
                           <div class="d-flex align-items-center gap-3">
                               <input type="radio" name="year" id="${year}" value="${year}">
                               <label for="${year}">${year}</label>
                           </div>
                       ;
                       inputsContainer.insertAdjacentHTML('beforeend', yearHtml);
                   });
               }
           
               async function checkTransactionStatus(userId, courses) {
                   try {
                       const response = await axios.get(/api/v1/transaction/get/${userId});
                       const transactions = response.data.transactions;
                       const groupedTransactions = transactions.reduce((acc, transaction) => {
                           if (!acc[transaction.year]) {
                               acc[transaction.year] = [];
                           }
                           acc[transaction.year].push(transaction);
                           return acc;
                       }, {});
           
                       const years = Object.keys(courses);
                       let lastPaidYearIndex = -1;
           
                       years.forEach((year, index) => {
                           if (groupedTransactions[year]) {
                               const yearTransactions = groupedTransactions[year];
                               const transTypeCount = yearTransactions.reduce((acc, transaction) => {
                                   acc[transaction.transType] = (acc[transaction.transType] || 0) + 1;
                                   return acc;
                               }, {});
           
                               if (transTypeCount['Full Payment'] >= 1) {
                                   lastPaidYearIndex = index;
                               }
                           }
                       });
           
                       years.forEach((year, index) => {
                           if (index > lastPaidYearIndex + 1) {
                               document.getElementById(year).disabled = true;
                           } else {
                               document.getElementById(year).disabled = false;
                           }
                       });
           
                       // Enable only the immediate year after the last fully paid year
                       if (lastPaidYearIndex + 1 < years.length) {
                           document.getElementById(years[lastPaidYearIndex + 1]).disabled = false;
                       }
                   } catch (error) {
                       console.error("Error fetching transactions:", error);
                   }
               }
           
               inputsContainer.addEventListener('change', function (event) {
                   document.getElementById('full').disabled = false;
                   document.getElementById('part').disabled = false;
                   const selectedYear = event.target.value;
                   axios.get(/api/v1/transaction/get/${userId})
                       .then(function (response) {
                           const transactions = response.data.transactions;
                           const groupedTransactions = transactions.reduce((acc, transaction) => {
                               if (!acc[transaction.year]) {
                                   acc[transaction.year] = [];
                               }
                               acc[transaction.year].push(transaction);
                               return acc;
                           }, {});
           
                           if (groupedTransactions[selectedYear]) {
                               const selectedYearTransactions = groupedTransactions[selectedYear];
                               const transTypeCount = selectedYearTransactions.reduce((acc, transaction) => {
                                   acc[transaction.transType] = (acc[transaction.transType] || 0) + 1;
                                   return acc;
                               }, {});
           
                               for (const [transType, count] of Object.entries(transTypeCount)) {
                                   if (transType == 'Full Payment' && count >= 1) {
                                       document.getElementById('full').disabled = true;
                                       document.getElementById('part').disabled = true;
                                   } else if (transType == 'Part Payment' && count == 2) {
                                       document.getElementById('full').disabled = true;
                                       document.getElementById('part').disabled = true;
                                   } else if (transType == 'Part Payment' && count == 1) {
                                       document.getElementById('full').disabled = true;
                                       document.getElementById('part').disabled = false;
                                   } else {
                                       document.getElementById('full').disabled = false;
                                       document.getElementById('part').disabled = false;
                                   }
                               }
                           } else {
                               console.log('No transactions found for the selected year:', selectedYear);
                           }
                       })
                       .catch(function (error) {
                           console.error("Error fetching transactions:", error);
                       });
           
                   console.log('Selected year:', selectedYear);
               });
           });
     </script>          
"